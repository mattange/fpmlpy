<?xml version="1.0" ?>
<!-- Author: Brian Lynn, Gem Soup LLC, for ISDA -->
<!-- May 2003 -->
<!-- generates a batch file for checking images -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

<xsl:output method="text"/>

<xsl:param name="view" select="'confirmation'" />
<xsl:variable name="notview" select="concat('!', $view)"/>

<xsl:template match="/">
	<xsl:text>REM Generated by checkImages.bat; DO NOT EDIT BY HAND!!
</xsl:text>
	<xsl:text>REM Check images for </xsl:text><xsl:value-of select="$view"/><xsl:text> view
</xsl:text>
	<xsl:text>@echo off
</xsl:text>
	<xsl:apply-templates mode="check-images"/>
</xsl:template>


<xsl:template match="node()" mode="check-images">
	<xsl:apply-templates mode="check-images"/>
</xsl:template>

<xsl:template match="section|bullets|bullet|paragraph" mode="check-images">
	<xsl:if test="not(@view) or ($view='master') or (not(contains(@view, $notview)) and (contains(@view, '!') or contains(@view, $view)))">
		<xsl:apply-templates mode="check-images"/>
	</xsl:if>
</xsl:template>

<xsl:template match="object" mode="check-images">
	<xsl:message>Alert!! object present</xsl:message>
</xsl:template>

<xsl:template match="diagram" mode="check-images">
	<xsl:if test="not(@view) or ($view='master') or (not(contains(@view, $notview)) and (contains(@view, '!') or contains(@view, $view)))">
		<xsl:variable name="src" select="@imageSource"/>
		<xsl:variable name="flipped">
			<xsl:call-template name="flip-slashes">
				<xsl:with-param name="txt" select="$src"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="source" select="concat('html\',$view, '\',normalize-space($flipped))"/>
		<xsl:text>IF NOT EXIST </xsl:text><xsl:value-of select="$source"/><xsl:text> ECHO Missing file </xsl:text><xsl:value-of select="$source"/><xsl:text>
</xsl:text>
	</xsl:if>
</xsl:template>

<xsl:template name="flip-slashes">
	<xsl:param name="txt"/>
	<xsl:choose>
		<xsl:when test="contains($txt,'/')">
			<xsl:variable name="front" select="substring-before($txt,'/')"/>
			<xsl:variable name="back" select="substring-after($txt,'/')"/>
			<xsl:variable name="back2">
				<xsl:call-template name="flip-slashes">
					<xsl:with-param name="txt" select="$back"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:value-of select="concat($front,'\',normalize-space($back2))"/>
		</xsl:when>
		<xsl:otherwise><xsl:value-of select="$txt"/></xsl:otherwise>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>
